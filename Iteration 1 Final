// Alayna Woleslagle
// swetr iteration 1

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class UML extends Application {

	double startingPointX, startingPointY;

	Rectangle newBox = null;
	boolean isBoxBeingDrawn = false;

	Line newLine = null;
	boolean isLineBeingDrawn = false;

	Circle newDot = null;
	boolean isDotBeingDrawn = false;

	TextField newTextField = null;
	boolean isTextFieldBeingDrawn = false;

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage UMLStage) {
		Group group = new Group();
		UMLStage.setTitle("SWETR UML Diagram Application");
		Scene UMLScene = new Scene(group, 1400, 700); // dimensions can be changed

		UMLStage.setScene(UMLScene);
		UMLStage.show();

		createUMLOptions(UMLStage, UMLScene, group);
	}

	private void createUMLOptions(Stage UMLStage, Scene UMLScene, Group group) {
		// creates vertical box to make formatting easier
		VBox optionsVBox = new VBox(10);

		// maybe look up if there is an align left function. Would be more
		// understandable
		optionsVBox.setTranslateY(50); // shift vbox down slightly
		optionsVBox.setTranslateX(-420); // shift vbox over to the left so under top row of buttons

		HBox buttonsHBox = new HBox(10);
		buttonsHBox.setPadding(new Insets(10)); // sets padding between nodes (so buttons)

		createLineOptions(optionsVBox, UMLScene, group);
		createBoxOptions(optionsVBox, UMLScene, group);
		createArrowOptions(optionsVBox, UMLScene, group);
		addText(optionsVBox, UMLScene, group);
		createButtons(buttonsHBox, UMLStage);

		VBox drawingBox = new VBox();
		// hexadecimal for light gray
		drawingBox.setStyle("-fx-background-color: #D3D3D3;");
		drawingBox.prefWidthProperty().bind(UMLStage.widthProperty().multiply(0.88));
		drawingBox.prefHeightProperty().bind(UMLStage.widthProperty().multiply(0.45));

		drawingBox.setTranslateY(50);
		drawingBox.setTranslateX(-420);

		buttonsHBox.getChildren().addAll(optionsVBox, drawingBox);
		group.getChildren().add(buttonsHBox);
	}

	private void createLineOptions(VBox optionsVBox, Scene drawingScene, Group group) {
		Text lineChoiceMessage = new Text();
		lineChoiceMessage.setText("Choose Line Type");

		// images in comboBox are behaving oddly, maybe we can add them later, but for
		// now I'll just use text options in the comboBox
		/*
		 * ImageView line = new ImageView("line.png"); ImageView boldLine = new
		 * ImageView("bold-line.png"); ImageView dottedLine = new
		 * ImageView("dotted-line.png");
		 * 
		 * 
		 * ComboBox<ImageView> lineOptions = new ComboBox<ImageView>();
		 * lineOptions.getItems().addAll(line, boldLine, dottedLine);
		 */

		ComboBox<String> lineOptions = new ComboBox<String>();
		lineOptions.getItems().addAll("Solid Line", "Dotted Line", "Bold Line");

		optionsVBox.getChildren().addAll(lineChoiceMessage, lineOptions);

		// Handle ComboBox event.
		lineOptions.setOnAction((event) -> {
			System.out.println(
					"ComboBox Action selected: " + lineOptions.getSelectionModel().getSelectedItem().toString());
			drawLine(drawingScene, group);
		});
	}

	private void createBoxOptions(VBox optionsVBox, Scene drawingScene, Group group) {
		Text boxChoiceMessage = new Text();
		boxChoiceMessage.setText("Choose Box Type");

		// ComboBox<ImageView> boxOptions = new ComboBox<ImageView>();
		ComboBox<String> boxOptions = new ComboBox<String>();

		boxOptions.getItems().addAll("Single Box", "Double Box", "Triple Box");

		optionsVBox.getChildren().addAll(boxChoiceMessage, boxOptions);

		// Handle ComboBox event.
		boxOptions.setOnAction((event) -> {
			System.out.println(
					"ComboBox Action selected: " + boxOptions.getSelectionModel().getSelectedItem().toString());
			drawBox(drawingScene, group);
		});

		// maybe should have a setBoxOption to hold what the user chooses
		// and a get box option that returns their choice
	}

	private void createArrowOptions(VBox optionsVBox, Scene drawingScene, Group group) {
		Text arrowChoiceMessage = new Text();
		arrowChoiceMessage.setText("Choose Arrow Type");

		ComboBox<String> arrowOptions = new ComboBox<String>();
		arrowOptions.getItems().addAll("Normal", "Diamond", "Solid Diamond");

		optionsVBox.getChildren().addAll(arrowChoiceMessage, arrowOptions);

		// Handle ComboBox event.
		arrowOptions.setOnAction((event) -> {
			System.out.println(
					"ComboBox Action selected: " + arrowOptions.getSelectionModel().getSelectedItem().toString());
			// for now, just going to represent an arrow with a dot on the screen. I think
			// we need to design our own arrows later
			drawDot(drawingScene, group);
		});
	}

	private void addText(VBox optionsVBox, Scene drawingScene, Group group) {
		CheckBox addTextCheckBox = new CheckBox("Add Text");
		addTextCheckBox.setIndeterminate(false);

		optionsVBox.getChildren().add(addTextCheckBox);

		// Handle ComboBox event.
		addTextCheckBox.setOnAction((event) -> {
			if (addTextCheckBox.isSelected() == true) {
				drawTextField(drawingScene, group);
			} else {
				addTextCheckBox.setSelected(false);
				// not sure why able to draw text fields after unchecking box...
			}
		});
	}

	private void createButtons(HBox buttonsHBox, Stage UMLStage) {
		Button newButton = new Button();
		newButton.setText("New");

		Button saveButton = new Button();
		saveButton.setText("Save");

		Button openExistingUMLButton = new Button();
		openExistingUMLButton.setText("Open Existing UML Diagram");

		Button exitButton = new Button();
		exitButton.setText("Exit");

		Button helpButton = new Button();
		helpButton.setText("Help");

		buttonsHBox.getChildren().addAll(newButton, saveButton, openExistingUMLButton, exitButton, helpButton);

		// New Button brings up new page
		newButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				createNewDiagram();
			}
		});

		// Save Button
		saveButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				// implement how to save diagram
			}
		});

		// Open Existing UML Button opens diagram saved on user's computer
		openExistingUMLButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				// implement how to open existing diagram
			}
		});

		// Exit Button
		exitButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				createExitWarning(UMLStage);
			}
		});

		// Help Button brings up help page
		helpButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				createHelpStage();
			}
		});
	}

	// Help screen, informing user how to interact with the application
	private void createHelpStage() {
		Stage helpStage = new Stage();
		helpStage.setTitle("SWETR's UML Diagram Creation Application");

		Text welcomeToSWETR = new Text();
		welcomeToSWETR.setText("Welcome to SWETR's UML Diagram Creation Application \n");
		welcomeToSWETR.setFont(Font.font(null, FontWeight.BOLD, 30));
		welcomeToSWETR.setTranslateX(0);
		welcomeToSWETR.setTranslateY(-130);

		Text welcomeText = new Text();
		welcomeText.setText(
				"To create a UML diagram, simply select from one of the \n many options on the lefthand side of the creation screen then begin to draw. ETC...");

		Button continueButton = new Button();
		continueButton.setText("Exit");
		continueButton.setTranslateX(0); // set button to center on x axis
		continueButton.setTranslateY(200); // move to be at bottom of welcome screen

		continueButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				helpStage.close();
			}
		});

		StackPane root = new StackPane();
		root.getChildren().addAll(welcomeToSWETR, welcomeText, continueButton);
		helpStage.setScene(new Scene(root, 900, 600)); // dimensions can be changed
		helpStage.show();
	}

	// creates new diagram template
	private void createNewDiagram() {
		Stage UMLStage = new Stage();
		UMLStage.setTitle("New UML Diagram");
		Group group = new Group();
		Scene UMLScene = new Scene(group, 1400, 700);
		UMLStage.setScene(UMLScene); // dimensions can be changed
		UMLStage.show();

		createUMLOptions(UMLStage, UMLScene, group);
	}

	private void createExitWarning(Stage UMLStage) {
		Stage exitWarningStage = new Stage();
		StackPane exitRoot = new StackPane();

		exitWarningStage.setScene(new Scene(exitRoot, 400, 300)); // dimensions can be changed
		exitWarningStage.show();

		Text warningMessage = new Text();
		warningMessage.setText(
				"\t \t \t WARNING! \n \n Be sure to save your work before exiting. \n Any unsaved work will be deleted.");

		HBox buttonHBox = new HBox();
		buttonHBox.setSpacing(20);
		// shifts hbox to bottom of message screen
		buttonHBox.setTranslateX(70);
		buttonHBox.setTranslateY(260);

		Button cancelButton = new Button();
		cancelButton.setText("Cancel");

		Button exitButton = new Button();
		exitButton.setText("Exit and Close Application");

		// close exit warning screen, not application
		cancelButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				exitWarningStage.close();
			}
		});

		// close exit warning screen AND application
		exitButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				exitWarningStage.close();
				UMLStage.close();
			}
		});

		// add buttons to hbox
		buttonHBox.getChildren().addAll(cancelButton, exitButton);
		// add hbox and message to the warning screen
		exitRoot.getChildren().addAll(warningMessage, buttonHBox);

		// maybe add save button to message
	}

	private void drawBox(Scene UMLScene, Group group) {

		// mouse pressed, user is about to draw a new box
		UMLScene.setOnMousePressed((MouseEvent event) -> {

			if (isBoxBeingDrawn == false) {
				// get x and y coordinates of the mouse press
				startingPointX = event.getSceneX();
				startingPointY = event.getSceneY();

				if (startingPointX > 160 && startingPointX < 1390 && startingPointY > 61 && startingPointY < 690) {
					newBox = new Rectangle();

					newBox.setFill(Color.LIGHTGRAY); // makes entire box white
					newBox.setStroke(Color.BLACK); // gives box black outline

					group.getChildren().add(newBox);

					isBoxBeingDrawn = true;
				}
			}
		});

		// while user is dragging box, dimensions change
		UMLScene.setOnMouseDragged((MouseEvent event) -> {
			if (isBoxBeingDrawn == true) {
				double currentEndingPointX = event.getSceneX();
				double currentEndingPointY = event.getSceneY();

				// makes it so if user drags box outside of gray area, it won't go past sides of
				// gray window
				if (currentEndingPointX < 160) { // left side of gray area
					currentEndingPointX = 160;
				}
				if (currentEndingPointX > 1390) { // right side of gray area
					currentEndingPointX = 1390;
				}
				if (currentEndingPointY < 61) { // top of gray area
					currentEndingPointY = 61;
				}
				if (currentEndingPointY > 690) { // bottom of gray area
					currentEndingPointY = 690;
				}

				newBox.setX(startingPointX);
				newBox.setY(startingPointY);
				newBox.setWidth(currentEndingPointX - startingPointX);
				newBox.setHeight(currentEndingPointY - startingPointY);

				// these make it so user can still draw rectangle if width and height are
				// negative. Just makes those positive
				if (newBox.getWidth() < 0) {
					newBox.setWidth(-newBox.getWidth());
					newBox.setX(newBox.getX() - newBox.getWidth());
				}

				if (newBox.getHeight() < 0) {
					newBox.setHeight(-newBox.getHeight());
					newBox.setY(newBox.getY() - newBox.getHeight());
				}
			}
		});

		// user finished drawing box, reset variables
		UMLScene.setOnMouseReleased((MouseEvent event) -> {
			if (isBoxBeingDrawn == true) {
				newBox = null;
				isBoxBeingDrawn = false;
			}
		});
	}

	private void drawLine(Scene UMLScene, Group group) {

		// mouse pressed, user is about to draw a new line
		UMLScene.setOnMousePressed((MouseEvent event) -> {

			if (isLineBeingDrawn == false) {
				// get x and y coordinates of the mouse press
				startingPointX = event.getSceneX();
				startingPointY = event.getSceneY();

				if (startingPointX > 160 && startingPointX < 1390 && startingPointY > 61 && startingPointY < 690) {
					newLine = new Line();

					newLine.setFill(Color.BLACK);

					group.getChildren().add(newLine);

					isLineBeingDrawn = true;
				}
			}
		});

		// while user is dragging line, dimensions change
		UMLScene.setOnMouseDragged((MouseEvent event) -> {
			if (isLineBeingDrawn == true) {
				double currentEndingPointX = event.getSceneX();
				double currentEndingPointY = event.getSceneY();

				// makes it so if user drags line outside of gray area, it won't go past sides
				// of gray window
				if (currentEndingPointX < 160) { // left side of gray area
					currentEndingPointX = 160;
				}
				if (currentEndingPointX > 1390) { // right side of gray area
					currentEndingPointX = 1390;
				}
				if (currentEndingPointY < 61) { // top of gray area
					currentEndingPointY = 61;
				}
				if (currentEndingPointY > 690) { // bottom of gray area
					currentEndingPointY = 690;
				}

				newLine.setStartX(startingPointX);
				newLine.setStartY(startingPointY);

				newLine.setEndX(currentEndingPointX);
				newLine.setEndY(currentEndingPointY);
			}
		});

		// user finished drawing line, reset variables
		UMLScene.setOnMouseReleased((MouseEvent event) -> {
			if (isLineBeingDrawn == true) {
				newLine = null;
				isLineBeingDrawn = false;
			}
		});
	}

	private void drawDot(Scene UMLScene, Group group) {

		UMLScene.setOnMousePressed((MouseEvent event) -> {
			if (isDotBeingDrawn == false) {

				newDot = new Circle();

				startingPointX = event.getSceneX();
				startingPointY = event.getSceneY();

				if (startingPointX > 160 && startingPointX < 1390 && startingPointY > 61 && startingPointY < 690) {
					newDot.setCenterX(startingPointX);
					newDot.setCenterY(startingPointY);
					newDot.setRadius(5);

					newDot.setFill(Color.BLACK);

					group.getChildren().add(newDot);

					isDotBeingDrawn = true;
				}
			}
		});

		UMLScene.setOnMouseReleased((MouseEvent event) -> {
			if (isDotBeingDrawn == true) {
				newDot = null;
				isDotBeingDrawn = false;
			}
		});
	}

	private void drawTextField(Scene UMLScene, Group group) {

		UMLScene.setOnMousePressed((MouseEvent event) -> {
			if (isTextFieldBeingDrawn == false) {

				newTextField = new TextField("Editable Text");

				startingPointX = event.getSceneX();
				startingPointY = event.getSceneY();

				if (startingPointX > 160 && startingPointX < 1390 && startingPointY > 61 && startingPointY < 690) {

					newTextField.setTranslateX(startingPointX);
					newTextField.setTranslateY(startingPointY);

					// Changes background color (light gray) and border (black)
					newTextField.setStyle("-fx-background-color: #D3D3D3; -fx-border-color: #000000;");

					group.getChildren().add(newTextField);

					isTextFieldBeingDrawn = true;
				}
			}
		});

		UMLScene.setOnMouseReleased((MouseEvent event) -> {
			if (isTextFieldBeingDrawn == true) {
				newTextField = null;
				isTextFieldBeingDrawn = false;
			}
		});
	}
}
