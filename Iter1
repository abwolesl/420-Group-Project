import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Background;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class UML extends Application {
	
	double startingPointX, startingPointY;
	Rectangle newBox = null;
	boolean isBoxBeingDrawn = false;
	
	
	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage UMLStage) {
		Group group = new Group();
		UMLStage.setTitle("SWETR UML Diagram Application");
		Scene UMLScene = new Scene(group, 1400, 700); // dimensions can be changed
		
		UMLStage.setScene(UMLScene);
		UMLStage.show();

		createUMLOptions(UMLStage, UMLScene, group);
	}

	private void createUMLOptions(Stage UMLStage, Scene UMLScene, Group group) {
		// creates vertical box to make formatting easier
		VBox optionsVBox = new VBox(10);
	
		// maybe look up if there is an align left function. Would be more
		// understandable
		optionsVBox.setTranslateY(50); // shift vbox down slightly
		optionsVBox.setTranslateX(-420); // shift vbox over to the left so under top row of buttons

		HBox buttonsHBox = new HBox(10);
		buttonsHBox.setPadding(new Insets(10)); // sets padding between nodes (so buttons)

		createLineOptions(optionsVBox);
		createBoxOptions(optionsVBox, UMLScene, group);
		createArrowOptions(optionsVBox);
		createButtons(buttonsHBox, UMLStage);
		
		VBox drawingBox = new VBox();
		// hexadecimal for light gray
		drawingBox.setStyle("-fx-background-color: #D3D3D3;");
		drawingBox.prefWidthProperty().bind(UMLStage.widthProperty().multiply(0.89));
		drawingBox.prefHeightProperty().bind(UMLStage.widthProperty().multiply(0.45));
		
		drawingBox.setTranslateY(50);
		drawingBox.setTranslateX(-420);

		buttonsHBox.getChildren().addAll(optionsVBox, drawingBox);
		group.getChildren().add(buttonsHBox);
		
		
		// get dimensions of drawingbox
		// left side of box x = 141 so make sure cannot draw box if x is less than 141
		// top of box is y = 61 so make sure cannot draw box if y is less than 61
		// right side of box is = x = 1386 so make sure cannot draw box is x is greater than 1386
		// bottom of box is y = 690 so make sure cannot draw box if y is greater than 690
		
		UMLScene.setOnMousePressed((MouseEvent event) -> {
			System.out.println(event.getSceneY());
		});
	}

	private void createLineOptions(VBox optionsVBox) {
		Text lineChoiceMessage = new Text();
		lineChoiceMessage.setText("Choose line type");

		ImageView line = new ImageView("line.png");
		ImageView boldLine = new ImageView("bold-line.png");
		ImageView dottedLine = new ImageView("dotted-line.png");

		ComboBox<ImageView> lineOptions = new ComboBox<ImageView>();
		lineOptions.getItems().addAll(line, boldLine, dottedLine);

		optionsVBox.getChildren().addAll(lineChoiceMessage, lineOptions);
	}

	private void createBoxOptions(VBox optionsVBox, Scene drawingScene, Group group) {
		Text boxChoiceMessage = new Text();
		boxChoiceMessage.setText("Choose box type");

		//ComboBox<ImageView> boxOptions = new ComboBox<ImageView>();
		ComboBox<String> boxOptions = new ComboBox<String>();
		
		boxOptions.getItems().addAll("Single Box", "Double Box", "Triple Box");

		optionsVBox.getChildren().addAll(boxChoiceMessage, boxOptions);
		
		// Handle ComboBox event.
		boxOptions.setOnAction((event) -> {
    			System.out.println("ComboBox Action selected: " + boxOptions.getSelectionModel().getSelectedItem().toString());
			getDimensionsOfBox(drawingScene, group);
		});
		
		// maybe should have a setBoxOption to hold what the user chooses
		// and a get box option that returns their choice
	}

	private void createArrowOptions(VBox optionsVBox) {
		Text arrowChoiceMessage = new Text();
		arrowChoiceMessage.setText("Choose arrow type");

		// Change to images of different box types
		ImageView line = new ImageView("line.png");
		ImageView boldLine = new ImageView("bold-line.png");
		ImageView dottedLine = new ImageView("dotted-line.png");

		ComboBox<ImageView> arrowOptions = new ComboBox<ImageView>();
		arrowOptions.getItems().addAll(line, boldLine, dottedLine);

		optionsVBox.getChildren().addAll(arrowChoiceMessage, arrowOptions);
	}

	private void createButtons(HBox buttonsHBox, Stage UMLStage) {
		Button newButton = new Button();
		newButton.setText("New");

		Button saveButton = new Button();
		saveButton.setText("Save");

		Button openExistingUMLButton = new Button();
		openExistingUMLButton.setText("Open Existing UML Diagram");

		Button exitButton = new Button();
		exitButton.setText("Exit");

		Button helpButton = new Button();
		helpButton.setText("Help");

		buttonsHBox.getChildren().addAll(newButton, saveButton, openExistingUMLButton, exitButton, helpButton);

		// New Button brings up new page
		newButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				createNewDiagram();
			}
		});

		// Save Button
		saveButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				// implement how to save diagram
			}
		});

		// Open Existing UML Button opens diagram saved on user's computer
		openExistingUMLButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				// implement how to open existing diagram
			}
		});

		// Exit Button
		exitButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				createExitWarning(UMLStage);
			}
		});

		// Help Button brings up help page
		helpButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				createHelpStage();
			}
		});
	}

	// Help screen, informing user how to interact with the application
	private void createHelpStage() {
		Stage helpStage = new Stage();
		helpStage.setTitle("SWETR's UML Diagram Creation Application");

		Text welcomeToSWETR = new Text();
		welcomeToSWETR.setText("Welcome to SWETR's UML Diagram Creation Application \n");
		welcomeToSWETR.setFont(Font.font(null, FontWeight.BOLD, 30));
		welcomeToSWETR.setTranslateX(0);
		welcomeToSWETR.setTranslateY(-130);

		Text welcomeText = new Text();
		welcomeText.setText(
				"To create a UML diagram, simply select from one of the \n many options on the lefthand side of the creation screen then begin to draw. ETC...");

		Button continueButton = new Button();
		continueButton.setText("Exit");
		continueButton.setTranslateX(0); // set button to center on x axis
		continueButton.setTranslateY(200); // move to be at bottom of welcome screen

		continueButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				helpStage.close();
			}
		});

		StackPane root = new StackPane();
		root.getChildren().addAll(welcomeToSWETR, welcomeText, continueButton);
		helpStage.setScene(new Scene(root, 900, 600)); // dimensions can be changed
		helpStage.show();
	}

	// creates new diagram template
	private void createNewDiagram() {
		Stage UMLStage = new Stage();
		UMLStage.setTitle("New UML Diagram");
		Group group = new Group();
		Scene UMLScene = new Scene(group, 1400, 700);
		UMLStage.setScene(UMLScene); // dimensions can be changed
		UMLStage.show();

		createUMLOptions(UMLStage, UMLScene, group);
	}

	private void createExitWarning(Stage UMLStage) {
		Stage exitWarningStage = new Stage();
		StackPane exitRoot = new StackPane();

		exitWarningStage.setScene(new Scene(exitRoot, 400, 300)); // dimensions can be changed
		exitWarningStage.show();

		Text warningMessage = new Text();
		warningMessage.setText(
				"\t \t \t WARNING! \n \n Be sure to save your work before exiting. \n Any unsaved work will be deleted.");

		HBox buttonHBox = new HBox();
		buttonHBox.setSpacing(20);
		// shifts hbox to bottom of message screen
		buttonHBox.setTranslateX(70);
		buttonHBox.setTranslateY(260);

		Button cancelButton = new Button();
		cancelButton.setText("Cancel");

		Button exitButton = new Button();
		exitButton.setText("Exit and Close Application");

		// close exit warning screen, not application
		cancelButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				exitWarningStage.close();
			}
		});

		// close exit warning screen AND application
		exitButton.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				exitWarningStage.close();
				UMLStage.close();
			}
		});

		// add buttons to hbox
		buttonHBox.getChildren().addAll(cancelButton, exitButton);
		// add hbox and message to the warning screen
		exitRoot.getChildren().addAll(warningMessage, buttonHBox);
		
		// maybe add save button to message
	}

	private void drawRectangle(double startingPointX, double startingPointY, double endingPointX, double endingPointY,
			Rectangle box) {
		
		box.setX(startingPointX);
		box.setY(startingPointY);
		box.setWidth(endingPointX - startingPointX);
		box.setHeight(endingPointY - startingPointY);

		///*
		if (box.getWidth() < 0) {
			box.setWidth(-box.getWidth());
			box.setX(box.getX() - box.getWidth());
		}

		if (box.getHeight() < 0) {
			box.setHeight(-box.getHeight());
			box.setY(box.getY() - box.getHeight());
		}
		//*/
	}

	private void getDimensionsOfBox(Scene UMLScene, Group group) {
		
		// mouse pressed, user is about to draw a new box
		UMLScene.setOnMousePressed((MouseEvent event) -> {
			
			if (isBoxBeingDrawn == false) {
				// get x and y coordinates of the mouse press
				startingPointX = event.getSceneX();
				startingPointY = event.getSceneY();

				newBox = new Rectangle();

				newBox.setFill(Color.LIGHTGRAY); // makes entire box white
				newBox.setStroke(Color.BLACK); // gives box black outline

				group.getChildren().add(newBox);

				isBoxBeingDrawn = true;
			}
		});

		UMLScene.setOnMouseDragged((MouseEvent event) -> {
			if (isBoxBeingDrawn == true) {
				double currentEndingPointX = event.getSceneX();
				double currentEndingPointY = event.getSceneY();
				
				drawRectangle(startingPointX, startingPointY, currentEndingPointX, currentEndingPointY, newBox);
			}
		});

		UMLScene.setOnMouseReleased((MouseEvent event) -> {
			if (isBoxBeingDrawn == true) {
				newBox = null;
				isBoxBeingDrawn = false;
			}
		});
	}
}
